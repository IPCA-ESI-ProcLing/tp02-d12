
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left+-left*/rightUMINUSARROW DTYPE EQUALS FN GREATEREQUAL NAME NOTEQUALS NUMBER PRINT SMALLEREQUAL STRING VARbody : statement body\n        | statementstatement : FN NAME '(' parameters ')' ARROW DTYPE NAME '{' body '}'\n        | FN NAME '(' ')' '{' body '}'parameters : parameters ',' DTYPE NAME\n        | DTYPE NAMEexpression : NAME '(' arguments ')'statement : PRINT argumentsstatement : var_declarationarguments : arguments ',' expression\n        | expressionstatement : VAR var_declaration_listvar_declaration_list : var_declaration_list ',' var_declaration\n        | var_declarationvar_declaration : NAME '=' expression\n        | NAMEexpression : expression '+' expression\n        | expression '-' expression\n        | expression '*' expression\n        | expression '/' expressionexpression : '-' expression %prec UMINUSexpression : '(' expression ')'expression : NUMBERexpression : NAMEexpression : STRING"
    
_lr_action_items = {'FN':([0,2,4,6,11,12,13,16,17,18,19,21,29,34,35,36,37,38,40,41,44,46,52,54,56,],[3,3,-16,-9,-8,-11,-24,-23,-25,-12,-14,-15,-21,-10,-17,-18,-19,-20,-22,-13,3,-7,-4,3,-3,]),'PRINT':([0,2,4,6,11,12,13,16,17,18,19,21,29,34,35,36,37,38,40,41,44,46,52,54,56,],[5,5,-16,-9,-8,-11,-24,-23,-25,-12,-14,-15,-21,-10,-17,-18,-19,-20,-22,-13,5,-7,-4,5,-3,]),'VAR':([0,2,4,6,11,12,13,16,17,18,19,21,29,34,35,36,37,38,40,41,44,46,52,54,56,],[7,7,-16,-9,-8,-11,-24,-23,-25,-12,-14,-15,-21,-10,-17,-18,-19,-20,-22,-13,7,-7,-4,7,-3,]),'NAME':([0,2,3,4,5,6,7,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,29,30,33,34,35,36,37,38,40,41,44,46,48,50,52,54,56,],[4,4,9,-16,13,-9,4,13,-8,-11,-24,13,13,-23,-25,-12,-14,-15,13,13,13,13,13,13,-21,4,45,-10,-17,-18,-19,-20,-22,-13,4,-7,51,53,-4,4,-3,]),'$end':([1,2,4,6,8,11,12,13,16,17,18,19,21,29,34,35,36,37,38,40,41,46,52,56,],[0,-2,-16,-9,-1,-8,-11,-24,-23,-25,-12,-14,-15,-21,-10,-17,-18,-19,-20,-22,-13,-7,-4,-3,]),'}':([2,4,6,8,11,12,13,16,17,18,19,21,29,34,35,36,37,38,40,41,46,49,52,55,56,],[-2,-16,-9,-1,-8,-11,-24,-23,-25,-12,-14,-15,-21,-10,-17,-18,-19,-20,-22,-13,-7,52,-4,56,-3,]),'=':([4,],[10,]),',':([4,11,12,13,16,17,18,19,21,29,31,34,35,36,37,38,39,40,41,45,46,51,],[-16,22,-11,-24,-23,-25,30,-14,-15,-21,43,-10,-17,-18,-19,-20,22,-22,-13,-6,-7,-5,]),'-':([5,10,12,13,14,15,16,17,21,22,23,24,25,26,27,28,29,34,35,36,37,38,40,46,],[15,15,24,-24,15,15,-23,-25,24,15,15,15,15,15,15,24,-21,24,-17,-18,-19,-20,-22,-7,]),'(':([5,9,10,13,14,15,22,23,24,25,26,27,],[14,20,14,27,14,14,14,14,14,14,14,14,]),'NUMBER':([5,10,14,15,22,23,24,25,26,27,],[16,16,16,16,16,16,16,16,16,16,]),'STRING':([5,10,14,15,22,23,24,25,26,27,],[17,17,17,17,17,17,17,17,17,17,]),')':([12,13,16,17,20,28,29,31,34,35,36,37,38,39,40,45,46,51,],[-11,-24,-23,-25,32,40,-21,42,-10,-17,-18,-19,-20,46,-22,-6,-7,-5,]),'+':([12,13,16,17,21,28,29,34,35,36,37,38,40,46,],[23,-24,-23,-25,23,23,-21,23,-17,-18,-19,-20,-22,-7,]),'*':([12,13,16,17,21,28,29,34,35,36,37,38,40,46,],[25,-24,-23,-25,25,25,-21,25,25,25,-19,-20,-22,-7,]),'/':([12,13,16,17,21,28,29,34,35,36,37,38,40,46,],[26,-24,-23,-25,26,26,-21,26,26,26,-19,-20,-22,-7,]),'DTYPE':([20,43,47,],[33,48,50,]),'{':([32,53,],[44,54,]),'ARROW':([42,],[47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([0,2,44,54,],[1,8,49,55,]),'statement':([0,2,44,54,],[2,2,2,2,]),'var_declaration':([0,2,7,30,44,54,],[6,6,19,41,6,6,]),'arguments':([5,27,],[11,39,]),'expression':([5,10,14,15,22,23,24,25,26,27,],[12,21,28,29,34,35,36,37,38,12,]),'var_declaration_list':([7,],[18,]),'parameters':([20,],[31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> body","S'",1,None,None,None),
  ('body -> statement body','body',2,'p_body','grammar.py',26),
  ('body -> statement','body',1,'p_body','grammar.py',27),
  ('statement -> FN NAME ( parameters ) ARROW DTYPE NAME { body }','statement',11,'p_statement_fn_impl','grammar.py',34),
  ('statement -> FN NAME ( ) { body }','statement',7,'p_statement_fn_impl','grammar.py',35),
  ('parameters -> parameters , DTYPE NAME','parameters',4,'p_parameters','grammar.py',43),
  ('parameters -> DTYPE NAME','parameters',2,'p_parameters','grammar.py',44),
  ('expression -> NAME ( arguments )','expression',4,'p_expression_func_call','grammar.py',54),
  ('statement -> PRINT arguments','statement',2,'p_statement_print','grammar.py',58),
  ('statement -> var_declaration','statement',1,'p_statemnet_setvar','grammar.py',62),
  ('arguments -> arguments , expression','arguments',3,'p_arguments_expression','grammar.py',66),
  ('arguments -> expression','arguments',1,'p_arguments_expression','grammar.py',67),
  ('statement -> VAR var_declaration_list','statement',2,'p_statement_var','grammar.py',77),
  ('var_declaration_list -> var_declaration_list , var_declaration','var_declaration_list',3,'p_var_declaration_list','grammar.py',81),
  ('var_declaration_list -> var_declaration','var_declaration_list',1,'p_var_declaration_list','grammar.py',82),
  ('var_declaration -> NAME = expression','var_declaration',3,'p_var_declaration','grammar.py',89),
  ('var_declaration -> NAME','var_declaration',1,'p_var_declaration','grammar.py',90),
  ('expression -> expression + expression','expression',3,'p_expression_binop','grammar.py',97),
  ('expression -> expression - expression','expression',3,'p_expression_binop','grammar.py',98),
  ('expression -> expression * expression','expression',3,'p_expression_binop','grammar.py',99),
  ('expression -> expression / expression','expression',3,'p_expression_binop','grammar.py',100),
  ('expression -> - expression','expression',2,'p_expression_uminus','grammar.py',104),
  ('expression -> ( expression )','expression',3,'p_expression_group','grammar.py',108),
  ('expression -> NUMBER','expression',1,'p_expression_number','grammar.py',112),
  ('expression -> NAME','expression',1,'p_expression_name','grammar.py',116),
  ('expression -> STRING','expression',1,'p_expression_string','grammar.py',120),
]
